## Kafka Broker 1
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kafka-0-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: kafka-0
  name: kafka-0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: kafka-0
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: kafka-0
    spec:
      containers:
        - env:
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: BROKER://:9092,EXTERNAL://localhost:19092
            - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
              value: CONTROLLER
            - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
              value: 0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
            - name: KAFKA_CFG_INTER_BROKER_LISTENER_NAME
              value: BROKER
            - name: KAFKA_CFG_LISTENERS
              value: BROKER://:9092,CONTROLLER://:9093,EXTERNAL://:19092
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: BROKER:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
            - name: KAFKA_CFG_NODE_ID
              value: "0"
            - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_CFG_PROCESS_ROLES
              value: controller,broker
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
              value: "2"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_KRAFT_CLUSTER_ID
              value: abcdefghijklmnopqrstuv
          image: docker.io/bitnami/kafka:3.6
          name: kafka0
          ports:
            - containerPort: 9092
              protocol: TCP
            - containerPort: 19092
              hostPort: 19092
              protocol: TCP
          volumeMounts:
            - mountPath: /bitnami/kafka
              name: kafka-0-data
      restartPolicy: Always
      volumes:
        - name: kafka-0-data
          persistentVolumeClaim:
            claimName: kafka-0-data
---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: kafka-0
  name: kafka-0
spec:
  ports:
    - name: "9092"
      port: 9092
      targetPort: 9092
    - name: "9093"
      port: 9093
      targetPort: 9093
    - name: "19092"
      port: 19092
      targetPort: 19092
  selector:
    io.kompose.service: kafka-0
---
# Kafka Broker 2
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kafka-1-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: kafka-1
  name: kafka-1
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: kafka-1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: kafka-1
    spec:
      containers:
        - env:
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: BROKER://:9092,EXTERNAL://localhost:19093
            - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
              value: CONTROLLER
            - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
              value: 0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
            - name: KAFKA_CFG_INTER_BROKER_LISTENER_NAME
              value: BROKER
            - name: KAFKA_CFG_LISTENERS
              value: BROKER://:9092,CONTROLLER://:9093,EXTERNAL://:19093
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: BROKER:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
            - name: KAFKA_CFG_NODE_ID
              value: "1"
            - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_CFG_PROCESS_ROLES
              value: controller,broker
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
              value: "2"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_KRAFT_CLUSTER_ID
              value: abcdefghijklmnopqrstuv
          image: docker.io/bitnami/kafka:3.6
          name: kafka1
          ports:
            - containerPort: 9092
              protocol: TCP
            - containerPort: 19093
              hostPort: 19093
              protocol: TCP
          volumeMounts:
            - mountPath: /bitnami/kafka
              name: kafka-1-data
      restartPolicy: Always
      volumes:
        - name: kafka-1-data
          persistentVolumeClaim:
            claimName: kafka-1-data
---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: kafka-1
  name: kafka-1
spec:
  ports:
    - name: "9092"
      port: 9092
      targetPort: 9092
    - name: "9093"
      port: 9093
      targetPort: 9093
    - name: "19093"
      port: 19093
      targetPort: 19093
  selector:
    io.kompose.service: kafka-1
---
# Kafka Broker 3
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kafka-2-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: kafka-2
  name: kafka-2
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: kafka-2
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: kafka-2
    spec:
      containers:
        - env:
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: BROKER://:9092,EXTERNAL://localhost:19094
            - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
              value: CONTROLLER
            - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
              value: 0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
            - name: KAFKA_CFG_INTER_BROKER_LISTENER_NAME
              value: BROKER
            - name: KAFKA_CFG_LISTENERS
              value: BROKER://:9092,CONTROLLER://:9093,EXTERNAL://:19094
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: BROKER:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
            - name: KAFKA_CFG_NODE_ID
              value: "2"
            - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_CFG_PROCESS_ROLES
              value: controller,broker
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
              value: "2"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_KRAFT_CLUSTER_ID
              value: abcdefghijklmnopqrstuv
          image: docker.io/bitnami/kafka:3.6
          name: kafka2
          ports:
            - containerPort: 9092
              protocol: TCP
            - containerPort: 19094
              hostPort: 19094
              protocol: TCP
          volumeMounts:
            - mountPath: /bitnami/kafka
              name: kafka-2-data
      restartPolicy: Always
      volumes:
        - name: kafka-2-data
          persistentVolumeClaim:
            claimName: kafka-2-data
---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: kafka-2
  name: kafka-2
spec:
  ports:
    - name: "9092"
      port: 9092
      targetPort: 9092
    - name: "9093"
      port: 9093
      targetPort: 9093
    - name: "19094"
      port: 19094
      targetPort: 19094
  selector:
    io.kompose.service: kafka-2
---
# Kafka UI
apiVersion: v1
kind: Pod
metadata:
  labels:
    io.kompose.service: kafka-ui
  name: kafka-ui
spec:
  containers:
    - env:
        - name: DYNAMIC_CONFIG_ENABLED
          value: "1"
        - name: KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS
          value: kafka.daud.dev
        - name: KAFKA_CLUSTERS_0_NAME
          value: kafka-cluster
      image: provectuslabs/kafka-ui:latest
      name: kafka-ui
      ports:
        - containerPort: 8080
          protocol: TCP
  restartPolicy: OnFailure
---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: kafka-ui
  name: kafka-ui
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
  selector:
    io.kompose.service: kafka-ui

---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: kafka-ui-daud-dev-tls
spec:
  secretName: kafka-ui-daud-dev-tls
  dnsNames:
    - kafka-ui.daud.dev
  issuerRef:
    group: cert-manager.io
    kind: ClusterIssuer
    name: letsencrypt
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: kafka-ui-ingress
spec:
  entryPoints:
    - websecure
  routes:
    - kind: Rule
      match: Host(`kafka-ui.daud.dev`)
      priority: 10
      services:
        - name: kafka-ui
          port: 8080
  tls:
    secretName: kafka-ui-daud-dev-tls

---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: kafka-daud-dev-tls
spec:
  secretName: kafka-daud-dev-tls
  dnsNames:
    - kafka.daud.dev
  issuerRef:
    group: cert-manager.io
    kind: ClusterIssuer
    name: letsencrypt
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRouteTCP
metadata:
  name: kafka-ingress
spec:
  entryPoints:
    - websecure
  routes:
    - match: HostSNI(`kafka.daud.dev`)
      priority: 10
      services:
        - name: kafka-0
          port: 19092
  tls:
    secretName: kafka-daud-dev-tls
